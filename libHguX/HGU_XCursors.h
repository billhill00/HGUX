#ifndef HGU_XCURSORS_H
#define HGU_XCURSORS_H
#if defined(__GNUC__)
#ident "University of Edinburgh $Id$"
#else
static char _libHguX/HGU_XCursors_h[] = "University of Edinburgh $Id$";
#endif
/*!
* \file         HGU_XCursors.h
* \author	Richard Baldock
* \date         April 2009
* \version      $Id$
* \par
* Address:
*               MRC Human Genetics Unit,
*               MRC Institute of Genetics and Molecular Medicine,
*               University of Edinburgh,
*               Western General Hospital,
*               Edinburgh, EH4 2XU, UK.
* \par
* Copyright (C), [2012],
* The University Court of the University of Edinburgh,
* Old College, Edinburgh, UK.
* 
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be
* useful but WITHOUT ANY WARRANTY; without even the implied
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
* PURPOSE.  See the GNU General Public License for more
* details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the Free
* Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA  02110-1301, USA.
* \ingroup      HGU_X
* \brief        Cursor definitions.
*/

#ifdef  __cplusplus
extern "C" {
#endif


#define cross_cursor_width 23
#define cross_cursor_height 23
#define cross_cursor_x_hot 11
#define cross_cursor_y_hot 11
static unsigned char cross_cursor_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00,
   0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x80, 0x3f,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
   0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00,
   0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00};
static unsigned char Cross_Cursor_bits[] = {
   0x00, 0x1c, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x1c, 0x00,
   0x00, 0x1c, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x7e, 0xff, 0x80, 0x7f,
   0x3f, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
   0x00, 0x08, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x1c, 0x00,
   0x00, 0x1c, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x1c, 0x00};

#define translate_cursor_width 17
#define translate_cursor_height 17
#define translate_cursor_x_hot 5
#define translate_cursor_y_hot 11
static unsigned char translate_cursor_bits[] = {
   0x30, 0x00, 0x00, 0x78, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfe, 0x01, 0x00,
   0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00, 0x30, 0x00, 0x00,
   0x30, 0x20, 0x00, 0x30, 0x60, 0x00, 0x30, 0xe0, 0x00, 0xff, 0xff, 0x01,
   0xff, 0xff, 0x01, 0x30, 0xe0, 0x00, 0x30, 0x60, 0x00, 0x30, 0x20, 0x00,
   0x30, 0x00, 0x00};
static unsigned char Translate_Cursor_bits[] = {
   0x78, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfe, 0x01, 0x00, 0xff, 0x03, 0x00,
   0xff, 0x03, 0x00, 0x78, 0x00, 0x00, 0x78, 0x00, 0x00, 0x78, 0x30, 0x00,
   0x78, 0x70, 0x00, 0x78, 0xf0, 0x00, 0xff, 0xff, 0x01, 0xff, 0xff, 0x01,
   0xff, 0xff, 0x01, 0xff, 0xff, 0x01, 0x78, 0xf0, 0x00, 0x78, 0x70, 0x00,
   0x78, 0x30, 0x00};

#define scale_cursor_width 19
#define scale_cursor_height 19
#define scale_cursor_x_hot 9
#define scale_cursor_y_hot 9
static unsigned char scale_cursor_bits[] = {
   0xc0, 0x1f, 0x00, 0x30, 0x60, 0x00, 0x08, 0x80, 0x00, 0x04, 0x00, 0x01,
   0x02, 0x7e, 0x02, 0x02, 0x7c, 0x02, 0x01, 0x78, 0x04, 0x01, 0x7c, 0x04,
   0x01, 0x6e, 0x04, 0x01, 0x47, 0x04, 0x01, 0x02, 0x04, 0x01, 0x00, 0x04,
   0x01, 0x00, 0x04, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x04, 0x00, 0x01,
   0x08, 0x80, 0x00, 0x30, 0x60, 0x00, 0xc0, 0x1f, 0x00};
static unsigned char Scale_Cursor_bits[] = {
   0xf0, 0x7f, 0x00, 0xf8, 0xff, 0x00, 0x3c, 0xe0, 0x01, 0x0e, 0xff, 0x03,
   0x07, 0xff, 0x07, 0x07, 0xfe, 0x07, 0x03, 0xfe, 0x06, 0x03, 0xfe, 0x06,
   0x03, 0xff, 0x06, 0x83, 0xff, 0x06, 0x83, 0xc7, 0x06, 0x03, 0x03, 0x06,
   0x03, 0x00, 0x06, 0x07, 0x00, 0x07, 0x07, 0x00, 0x07, 0x0e, 0x80, 0x03,
   0x3c, 0xe0, 0x01, 0xf8, 0xff, 0x00, 0xf0, 0x7f, 0x00};

#define rotate_cursor_width 21
#define rotate_cursor_height 21
#define rotate_cursor_x_hot 10
#define rotate_cursor_y_hot 10
static unsigned char rotate_cursor_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0xc0, 0x7f, 0x00,
   0xf0, 0xe0, 0x01, 0x30, 0x80, 0x03, 0x18, 0x00, 0x03, 0x18, 0x00, 0x00,
   0x0c, 0x00, 0x00, 0x0c, 0x00, 0x03, 0x0c, 0x80, 0x07, 0x0c, 0xc0, 0x0f,
   0x0c, 0xe0, 0x1f, 0x18, 0x00, 0x03, 0x18, 0x00, 0x03, 0x30, 0x80, 0x01,
   0xf0, 0xe0, 0x01, 0xc0, 0x7f, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00};
static unsigned char Rotate_Cursor_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0xc0, 0x7f, 0x00, 0xf0, 0xff, 0x01,
   0xf8, 0xff, 0x03, 0xf8, 0xe0, 0x07, 0x3c, 0xc0, 0x07, 0x3c, 0x80, 0x07,
   0x1e, 0x00, 0x03, 0x1e, 0x80, 0x07, 0x1e, 0xc0, 0x0f, 0x1e, 0xe0, 0x1f,
   0x1e, 0xf0, 0x1f, 0x3c, 0xf0, 0x1f, 0x3c, 0xc0, 0x07, 0xf8, 0xe0, 0x03,
   0xf8, 0xff, 0x03, 0xf0, 0xff, 0x01, 0xc0, 0x7f, 0x00, 0x00, 0x1f, 0x00,
   0x00, 0x00, 0x00};

#define shear_cursor_width 21
#define shear_cursor_height 21
#define shear_cursor_x_hot 10
#define shear_cursor_y_hot 10
static unsigned char shear_cursor_bits[] = {
   0x00, 0x18, 0x00, 0x00, 0x70, 0x00, 0x00, 0xe0, 0x01, 0x80, 0xff, 0x1f,
   0x40, 0xe0, 0x11, 0x40, 0x70, 0x08, 0x20, 0x18, 0x08, 0x20, 0x00, 0x04,
   0x10, 0x00, 0x04, 0x10, 0x00, 0x02, 0x08, 0x00, 0x02, 0x08, 0x00, 0x01,
   0x04, 0x00, 0x01, 0x04, 0x80, 0x00, 0x02, 0x83, 0x00, 0xc2, 0x41, 0x00,
   0xf1, 0x40, 0x00, 0xff, 0x3f, 0x00, 0xf0, 0x00, 0x00, 0xc0, 0x01, 0x00,
   0x00, 0x03, 0x00};
static unsigned char Shear_Cursor_bits[] = {
   0x00, 0x7c, 0x00, 0x00, 0xf8, 0x01, 0x80, 0xff, 0x1f, 0xc0, 0xff, 0x1f,
   0xe0, 0xff, 0x1f, 0xe0, 0xf8, 0x1d, 0x70, 0x7c, 0x1c, 0x70, 0x1c, 0x0e,
   0x38, 0x00, 0x0e, 0x38, 0x00, 0x07, 0x1c, 0x00, 0x07, 0x1c, 0x80, 0x03,
   0x0e, 0x80, 0x03, 0x0e, 0xc7, 0x01, 0xc7, 0xc7, 0x01, 0xf7, 0xe3, 0x00,
   0xff, 0xff, 0x00, 0xff, 0x7f, 0x00, 0xff, 0x7f, 0x00, 0xf0, 0x03, 0x00,
   0xc0, 0x07, 0x00};

#define blob_cursor_width 10
#define blob_cursor_height 10
#define blob_cursor_x_hot 4
#define blob_cursor_y_hot 4
static unsigned char blob_cursor_bits[] = {
   0x00, 0x00, 0xfe, 0x01, 0xfe, 0x01, 0xfe, 0x01, 0xfe, 0x01, 0xfe, 0x01,
   0xfe, 0x01, 0xfe, 0x01, 0xfe, 0x01, 0x00, 0x00};
static unsigned char Blob_Cursor_bits[] = {
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};

#define point_cursor_width 3
#define point_cursor_height 3
#define point_cursor_x_hot 1
#define point_cursor_y_hot 1
static unsigned char point_cursor_bits[] = {
   0x00, 0x02, 0x00};
static unsigned char Point_Cursor_bits[] = {
   0x00, 0x02, 0x00};

#ifdef  __cplusplus
}
#endif

#endif  /* HGU_XCURSORS_H */
/* don't put anything after this line */
